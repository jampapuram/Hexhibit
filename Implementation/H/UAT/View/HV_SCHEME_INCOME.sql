
  CREATE OR REPLACE  VIEW HV_SCHEME_INCOME (TYPE, VALUE_DATE, SCHEME, ACCOUNT_CODE, REPO_TRAN, REPO_NAME, REPO_MAT_DATE, TOTAL_AMOUNT) AS 
  select 'CBLO_GSEC' AS TYPE,
 CBLO_GSEC.VALUE_DATE VALUE_DATE,
CBLO_GSEC.SCHEME SCHEME,
CBLO_GSEC.ACCOUNT_CODE ACCOUNT_CODE,
NULL REPO_TRAN,
NULL REPO_NAME,
NULL REPO_MAT_DATE,
NVL((CBLO_GSEC.CBLO_GSEC_AMOUNT),0)  TOTAL_AMOUNT
FROM  HI_CBLO_GSEC_INCOME_LIVE CBLO_GSEC
UNION ALL ----FO_BROKERAGE
 select 'FO_BROKERAGE' AS TYPE,
FO_BROKERAGE.VALUE_DATE VALUE_DATE,
FO_BROKERAGE.SCHEME SCHEME,
FO_BROKERAGE.ACCOUNT_CODE ACCOUNT_CODE,
NULL REPO_TRAN,
NULL REPO_NAME,
NULL REPO_MAT_DATE,
(NVL(FO_BROKERAGE.FO_BROKERAGE,0)) TOTAL_AMOUNT
FROM HI_FO_BROKERAGE_LIVE FO_BROKERAGE
UNION ALL ------REPO_INCOME
 select 'REPO_INCOME' AS TYPE,
 REPO_INCOME.VALUE_DATE VALUE_DATE,
REPO_INCOME.SCHEME SCHEME,
NULL ACCOUNT_CODE,
REPO_INCOME.TRAN_TYPE REPO_TRAN,
REPO_INCOME.NAME REPO_NAME,
REPO_INCOME.MAT_DATE REPO_MAT_DATE,
 ROUND(NVL((REPO_INCOME.REPO_AMOUNT),0),4) TOTAL_AMOUNT
FROM HI_REPO_INCOME_LIVE REPO_INCOME
UNION ALL  ---NET_INCOME
 select 'NET_INCOME' AS TYPE,
 NET_INCOME.VALUE_DATE VALUE_DATE,
NET_INCOME.SCHEME SCHEME,
NET_INCOME.ACCOUNT_CODE ACCOUNT_CODE,
NULL REPO_TRAN,
NULL REPO_NAME,
NULL REPO_MAT_DATE,
NVL((NET_INCOME.NET_INCOME),0) TOTAL_AMOUNT
FROM  HI_NET_INCOME_LIVE NET_INCOME
UNION ALL  ----NET_UNREALIZED (MOVEMENT)
select 'NET_UNREALIZED' AS TYPE,
 HI_NET_UNREALIZED_INCOME_LIVE.NAV_DATE VALUE_DATE,
HI_NET_UNREALIZED_INCOME_LIVE.SCHEME SCHEME,
NULL ACCOUNT_CODE,
NULL REPO_TRAN,
NULL REPO_NAME,
NULL REPO_MAT_DATE,
NVL((HI_NET_UNREALIZED_INCOME_LIVE.TOTAL_NET_UNREALIZED_AMOUNT),0)  TOTAL_AMOUNT
FROM  HI_NET_UNREALIZED_INCOME_LIVE HI_NET_UNREALIZED_INCOME_LIVE
UNION ALL  --NEW_PURCHASE
select 'NEW_PURCHASE' AS TYPE,
 HI_PURCHASE_ADD_LIVE.NAV_DATE VALUE_DATE,
HI_PURCHASE_ADD_LIVE.SCHEME SCHEME,
NULL ACCOUNT_CODE,
NULL REPO_TRAN,
NULL REPO_NAME,
NULL REPO_MAT_DATE,
NVL((HI_PURCHASE_ADD_LIVE.TOTAL_PURCHASE_ADDITION_AMOUNT ),0)  TOTAL_AMOUNT
FROM  HI_PURCHASE_ADD_LIVE HI_PURCHASE_ADD_LIVE
UNION ALL  --SALES_MATURITY_PTC
select 'SALES_MAT_PTC' AS TYPE,
 HI_SALE_MAT_PTC_LIVE.NAV_DATE VALUE_DATE,
HI_SALE_MAT_PTC_LIVE.SCHEME SCHEME,
NULL ACCOUNT_CODE,
NULL REPO_TRAN,
NULL REPO_NAME,
NULL REPO_MAT_DATE,
NVL((HI_SALE_MAT_PTC_LIVE.TOTAL_SALE_MAT_PTC_AMOUNT ),0)  TOTAL_AMOUNT
FROM  HI_SALE_MAT_PTC_LIVE HI_SALE_MAT_PTC_LIVE;
 
